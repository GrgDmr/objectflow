<?xml version="1.0"?>
<doc>
    <assembly>
        <name>objectflow.stateful</name>
    </assembly>
    <members>
        <member name="T:Rainbow.ObjectFlow.Stateful.StatefulWorkflow`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Rainbow.ObjectFlow.Stateful.IStatefulWorkflow`1">
            <summary>
            A workflow that is able to pause at states and be resumed later.
            </summary>
            <typeparam name="T">The object that will be stepped through the workflow</typeparam>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.IStatefulWorkflow`1.Yield(System.Object)">
            <summary>
            Signal that the workflow should pause here and then resume later
            at this same point. This can be used to persist the state of the 
            object and resumed later when <c>Continue</c> is called.
            </summary>
            <param name="breakPointId">The identifier that describes where the workflow
            yielded so that it can return to this point later.</param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.IStatefulWorkflow`1.Continue(`0)">
            <summary>
            Continues execution of the workflow where <c>obj</c> last left off 
            after <c>Yield</c> was called.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.IStatefulWorkflow`1.IsMidlife(`0)">
            <summary>
            Indicates that <c>obj</c> has not yet passed through all workflow steps.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.IStatefulWorkflow`1.Do``1">
            <summary>
            Registers an instance of the specified type in the workflow
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.IStatefulWorkflow`1.Do``1(Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Registers an instance of the specified type in the workflow
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.IStatefulWorkflow`1.Do(Rainbow.ObjectFlow.Interfaces.IOperation{`0})">
            <summary>
            Adds operations into the workflow definition
            </summary>
            <param name="operation">The operation to add</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.IStatefulWorkflow`1.Do(System.Func{`0,`0})">
            <summary>
            Adds a function into the execution path
            </summary>
            <param name="function">The function to add</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.IStatefulWorkflow`1.Do(System.Func{`0,`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds a function into the execution path
            </summary>
            <param name="function">The funciton to add</param>
            <param name="constraint">constraint that determines if the operation is executed</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.IStatefulWorkflow`1.Do(Rainbow.ObjectFlow.Interfaces.IOperation{`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds an operation into the execution path 
            </summary>
            <param name="operation">operatio to add</param>
            <param name="constraint">constraint that determines if the operation is executed</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.IStatefulWorkflow`1.Do(Rainbow.ObjectFlow.Interfaces.IWorkflow{`0})">
            <summary>
            Adds a sub-workflow into the execution path
            </summary>
            <param name="workflow">The function to add</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.IStatefulWorkflow`1.Do(Rainbow.ObjectFlow.Interfaces.IWorkflow{`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds a sub-workflow into the execution path
            </summary>
            <param name="workflow">The funciton to add</param>
            <param name="constraint">constraint that determines if the workflow is executed</param>
        </member>
        <member name="P:Rainbow.ObjectFlow.Stateful.IStatefulWorkflow`1.WorkflowId">
            <summary>
            Gets an identifier that describes the workflow. This can be a string,
            number, Guid, or any other object that provides a meaningful implementation
            of the <c>.Equals(object)</c> method.
            </summary>
        </member>
        <member name="F:Rainbow.ObjectFlow.Stateful.StatefulWorkflow`1.subflows">
            <summary>Index for </summary>
        </member>
        <member name="F:Rainbow.ObjectFlow.Stateful.StatefulWorkflow`1.keys">
            <summary>An ordered list of keys</summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.StatefulWorkflow`1.#ctor(System.Object)">
            <summary>
            Creates a workflow that has persistable states and is identified by
            <c>workflowId</c>.
            </summary>
            <param name="workflowId">Persistable value that represents this workflow.
            </param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.StatefulWorkflow`1.#ctor">
            <summary>
            Creates a new workflow that has persistable states. Usage of this 
            constructure asserts that an object that might pass through this workflow
            will pass through only this workflow and no other stateful workflow.
            Because of this restriction, it is recommended that you use 
            <see cref="M:Rainbow.ObjectFlow.Stateful.StatefulWorkflow`1.#ctor(System.Object)"/> instead.
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.StatefulWorkflow`1.Yield(System.Object)">
            <summary>
            Continue the workflow where the given object left off.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.StatefulWorkflow`1.Continue(`0)">
            <summary>
            Continues execution of the workflow where <c>obj</c> last left off 
            after <c>Yield</c> was called.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.StatefulWorkflow`1.IsMidlife(`0)">
            <summary>
            Indicates that <c>obj</c> is currently passing through this workflow
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.StatefulWorkflow`1.Start(`0)">
            <summary>
            Start the workflow
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.StatefulWorkflow`1.Do``1">
            <summary>
            Registers an instance of the specified type in the workflow
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.StatefulWorkflow`1.Rainbow#ObjectFlow#Stateful#IStatefulWorkflow{T}#Do``1(Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Registers an instance of the specified type in the workflow
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.StatefulWorkflow`1.Do(Rainbow.ObjectFlow.Interfaces.IOperation{`0})">
            <summary>
            Adds operations into the workflow definition
            </summary>
            <param name="operation">The operation to add</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.StatefulWorkflow`1.Rainbow#ObjectFlow#Stateful#IStatefulWorkflow{T}#Do(System.Func{`0,`0})">
            <summary>
            Adds a function into the execution path
            </summary>
            <param name="function">The function to add</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.StatefulWorkflow`1.Rainbow#ObjectFlow#Stateful#IStatefulWorkflow{T}#Do(System.Func{`0,`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds a function into the execution path
            </summary>
            <param name="function">The funciton to add</param>
            <param name="constraint">constraint that determines if the operation is executed</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.StatefulWorkflow`1.Rainbow#ObjectFlow#Stateful#IStatefulWorkflow{T}#Do(Rainbow.ObjectFlow.Interfaces.IOperation{`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds an operation into the execution path 
            </summary>
            <param name="operation">operatio to add</param>
            <param name="constraint">constraint that determines if the operation is executed</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.StatefulWorkflow`1.Rainbow#ObjectFlow#Stateful#IStatefulWorkflow{T}#Do(Rainbow.ObjectFlow.Interfaces.IWorkflow{`0})">
            <summary>
            Adds a sub-workflow into the execution path
            </summary>
            <param name="workflow">The function to add</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.StatefulWorkflow`1.Rainbow#ObjectFlow#Stateful#IStatefulWorkflow{T}#Do(Rainbow.ObjectFlow.Interfaces.IWorkflow{`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds a sub-workflow into the execution path
            </summary>
            <param name="workflow">The funciton to add</param>
            <param name="constraint">constraint that determines if the workflow is executed</param>
        </member>
        <member name="P:Rainbow.ObjectFlow.Stateful.StatefulWorkflow`1.WorkflowId">
            <summary>
            Gets an identifier that describes the workflow. This can be a string,
            number, Guid, or any other object that provides a meaningful implementation
            of the <c>.Equals(object)</c> method.
            </summary>
        </member>
        <member name="T:Rainbow.ObjectFlow.Stateful.IStatefulObject">
            <summary>
            <para>
            A persistable object that represents where a workflow was left off. By passing
            one of these objects to a IStatefullWorkflow we can resume the workflow where
            it was last left off. 
            </para>
            <para>
            The state ID is left as an object but should contain a meaningful implementation 
            of <c>.Equals(object)</c>. Therefore, string, int, and Guid are all great choices
            for state and workflow identifiers. If you choose to make a custom object for this
            purpose, be sure to provide a meaningful <c>Equals(object)</c> operation.
            </para>
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.IStatefulObject.GetStateId(System.Object)">
            <summary>
            Gets the identifer that represents the object's state. A workflow uses this
            identifier to restore the state of the object in the 
            </summary>
            <param name="workflowId">The identifier for the workflow. If this value is
            null, this object is expected to either be valid for only a single workflow
            or should throw a NotSupportedException</param>
            <returns>The state within a workflow that this object is currently in. If the 
            object isn't in a worflow identified by <c>workflowId</c>, this method will 
            return null</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Stateful.IStatefulObject.SetStateId(System.Object,System.Object)">
            <summary>
            Gets the identifer that represents the object's state. A workflow uses this
            identifier to restore the state of the object in the 
            </summary>
            <param name="workflowId">The identifier for the workflow. If this value is
            null, this object is expected to either be valid for only a single workflow
            or should throw a NotSupportedException</param>
            <param name="stateId">The state identifier for the workflow. </param>
        </member>
    </members>
</doc>
