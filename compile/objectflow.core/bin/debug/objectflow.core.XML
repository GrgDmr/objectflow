<?xml version="1.0"?>
<doc>
    <assembly>
        <name>objectflow.core</name>
    </assembly>
    <members>
        <member name="T:Rainbow.ObjectFlow.Language.IDefine`1">
            <summary>
             Interface for defining workflows
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.IDefine`1.Do``1">
            <summary>
            Registers an instance of the specified type in the workflow
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.IDefine`1.Do``1(Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Registers an instance of the specified type in the workflow
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.IDefine`1.Do(Rainbow.ObjectFlow.Interfaces.IOperation{`0})">
            <summary>
            Adds operations into the workflow definition
            </summary>
            <param name="operation">The operation to add</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.IDefine`1.Do(System.Func{`0,`0})">
            <summary>
            Adds a function into the execution path
            </summary>
            <param name="function">The function to add</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.IDefine`1.Do(System.Func{`0,`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds a function into the execution path
            </summary>
            <param name="function">The funciton to add</param>
            <param name="constraint">constraint that determines if the operation is executed</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.IDefine`1.Do(Rainbow.ObjectFlow.Interfaces.IOperation{`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds an operation into the execution path 
            </summary>
            <param name="operation">operatio to add</param>
            <param name="constraint">constraint that determines if the operation is executed</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.IDefine`1.Do(Rainbow.ObjectFlow.Interfaces.IWorkflow{`0})">
            <summary>
            Adds a sub-workflow into the execution path
            </summary>
            <param name="workflow">The function to add</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.IDefine`1.Do(Rainbow.ObjectFlow.Interfaces.IWorkflow{`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds a sub-workflow into the execution path
            </summary>
            <param name="workflow">The funciton to add</param>
            <param name="constraint">constraint that determines if the workflow is executed</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.IMerge`1.Do(Rainbow.ObjectFlow.Interfaces.IOperation{`0})">
            <summary>
            Adds operations into the workflow definition
            </summary>
            <param name="operation">The operation to add</param>
            <returns>this</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.IMerge`1.Do(System.Func{`0,`0})">
            <summary>
            Adds a function into the execution path
            </summary>
            <param name="function">The function to add</param>
            <returns>this</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.IMerge`1.Do(System.Func{`0,`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds a function into the execution path
            </summary>
            <param name="function">The funciton to add</param>
            <param name="constraint"></param>
            <returns>this</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.IMerge`1.Do(Rainbow.ObjectFlow.Interfaces.IOperation{`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds an operation into the execution path 
            </summary>
            <param name="operation">operatio to add</param>
            <param name="constraint">constraint that defines if the operation is executed</param>
            <returns>this</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.IMerge`1.Do(Rainbow.ObjectFlow.Interfaces.IWorkflow{`0})">
            <summary>
            Adds a sub-workflow into the execution path
            </summary>
            <param name="workflow">The function to add</param>
            <returns>this</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.IMerge`1.Do(Rainbow.ObjectFlow.Interfaces.IWorkflow{`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds a sub-workflow into the execution path
            </summary>
            <param name="workflow">The funciton to add</param>
            <param name="constraint"></param>
            <returns>this</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.IMerge`1.Do``1">
            <summary>
            Registers an instance of the specified type in the workflow
            </summary>
            <typeparam name="TOperation">Type that inherits from BasicOperation of T</typeparam>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.IMerge`1.Do``1(Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Registers an instance of the specified type in the workflow
            </summary>
            <typeparam name="TOperation">Type that inherits from BasicOperation of T</typeparam>
            <param name="constraint">The constraint to evaluate</param>
        </member>
        <member name="T:Rainbow.ObjectFlow.Interfaces.ICheckConstraint">
            <summary>
            Pre-condition for workflow operations.
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Interfaces.ICheckConstraint.Matches">
            <summary>
            Evaluates the constraint
            </summary>
            <returns>True if the constraint evaluated to true, false otherwise</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Interfaces.ICheckConstraint.Matches(System.Boolean)">
            <summary>
            Evaluates the constraint
            </summary>
            <param name="match">Value we are checking it matching</param>
            <returns>True if the constraint evaluated to true, false otherwise</returns>
        </member>
        <member name="T:Rainbow.ObjectFlow.Framework.BasicOperation`1">
            <summary>
            Implements common functionality for Operation objects.  
            All operations must inherit from BasicOperation.
            </summary>
            <typeparam name="T">Type of object this operation will work on.</typeparam>
        </member>
        <member name="T:Rainbow.ObjectFlow.Interfaces.IOperation`1">
            <summary>
            Defines the interface of items in a workflow.
            </summary>
            <typeparam name="T">Type of data the pipeline contains</typeparam>
        </member>
        <member name="M:Rainbow.ObjectFlow.Interfaces.IOperation`1.Execute(`0)">
            <summary>
            Executes the operation
            </summary>
            <param name="data">The data the operation will transform</param>
            <returns>input data transformed by the operation</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.BasicOperation`1.Execute(`0)">
            <summary>
            Executes the operation
            </summary>
            <param name="data">Data to perform transformations on</param>
            <returns>The operation results as an IEnumerable of T</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.BasicOperation`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.BasicOperation`1.SetSuccessResult(System.Boolean)">
            <summary>
            This method is called to set operation success.
            Override this method to define custom success criteria.
            </summary>
            <param name="succeeded">The value to set the SuccessResult property to.</param>
            <returns>Returns SuccessResult property after this method has set it.  This should be the same as the value passed to it.</returns>
            <example>
            Override example
            </example>
        </member>
        <member name="P:Rainbow.ObjectFlow.Framework.BasicOperation`1.SuccessResult">
            <summary>
            returns true if the operation succeeded, false otherwise.  
            </summary>
            <remarks>
            The default behaviour is to set this to True when the operation completes without Exception
            Use the SetSuccessResult virtual method to set this property.
            </remarks>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.IExpression.Then``1">
            <summary>
             Merges concurrent operations.  By default engine waits for all parallel operations to finish before executing subsequent operations sequentially
            </summary>
             <remarks>The default is to wait for all concurrent operatins to finish before continuing with sequential the following sequential operations</remarks>
        </member>
        <member name="P:Rainbow.ObjectFlow.Language.IExpression.With">
            <summary>
            Adds behaviours to the associated policy
            </summary>
        </member>
        <member name="T:Rainbow.ObjectFlow.Language.ICompose`1">
            <summary>
            Interface for composing operations
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.ICompose`1.Do(Rainbow.ObjectFlow.Interfaces.IOperation{`0})">
            <summary>
            Adds operations into the workflow definition
            </summary>
            <param name="operation">The operation to add</param>
            <returns>this</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.ICompose`1.Do(System.Func{`0,`0})">
            <summary>
            Adds a function into the execution path
            </summary>
            <param name="function">The function to add</param>
            <returns>this</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.ICompose`1.Do(System.Func{`0,`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds a function into the execution path
            </summary>
            <param name="function">The funciton to add</param>
            <param name="constraint"></param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.ICompose`1.Do(Rainbow.ObjectFlow.Interfaces.IOperation{`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds an operation into the execution path 
            </summary>
            <param name="operation">operatio to add</param>
            <param name="constraint">Condition that determines if the operation is executed</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.ICompose`1.Do(Rainbow.ObjectFlow.Interfaces.IWorkflow{`0})">
            <summary>
            Adds a sub-workflow into the execution path
            </summary>
            <param name="workflow">The function to add</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.ICompose`1.Do(Rainbow.ObjectFlow.Interfaces.IWorkflow{`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds a sub-workflow into the execution path
            </summary>
            <param name="workflow">The funciton to add</param>
            <param name="constraint">condition that determines if the operation is executed</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.ICompose`1.Do``1">
            <summary>
            Registers an instance of the type specified in the workflow
            </summary>
            <typeparam name="TOperation">Type that inherits from BasicOperation of T</typeparam>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.ICompose`1.Do``1(Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Registers an instance of the type specified in the workflow
            </summary>
            <typeparam name="TOperation">Type that inherits from BasicOperation of T</typeparam>
            <param name="constraint">The constraint to evaluate</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Engine.FunctionInvoker`1.#ctor">
            <summary>
            Used by mock framework
            </summary>
        </member>
        <member name="T:Rainbow.ObjectFlow.Framework.WorkflowMemoryLoader`1">
            <summary>
            Default in-memory loader for pipeline returns the data it was instantiated with.
            The pipeline requires a loader to get data into pipeline.  
            This could be a text file, database or other external resource.
            </summary>
            <typeparam name="T">Type of object the operation will contain.</typeparam>    
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.WorkflowMemoryLoader`1.#ctor(`0)">
            <summary>
            Instantietes the class with the input data for the pipeline.
            </summary>
            <param name="initialState">The data the operation will work on</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.WorkflowMemoryLoader`1.Execute(`0)">
            <summary>
            Executes the operation
            </summary>
            <param name="state">The data the operation will work on</param>
            <returns>The transformed data</returns>
        </member>
        <member name="T:Rainbow.ObjectFlow.Constraints.Condition">
            <summary>
            Container class for constraint functions built by helper class
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Constraints.Condition.#ctor">
            <summary>
             Provided for mocking framework
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Constraints.Condition.#ctor(System.Func{System.Boolean})">
            <summary>
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Constraints.Condition.#ctor(System.Func{System.Boolean},System.Collections.Generic.IList{Rainbow.ObjectFlow.Interfaces.ICheckConstraint})">
            <summary>
            </summary>
            <param name="condition"></param>
            <param name="constraints"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rainbow.ObjectFlow.Constraints.Condition.Matches">
            <summary>
            Evaluates the constraint
            </summary>
            <returns>True if the constraint evaluated to true, false otherwise</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Constraints.Condition.Matches(System.Boolean)">
            <summary>
            Evaluates the constraint
            </summary>
            <returns>True if the constraint evaluated to true, false otherwise</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Language.IRetryPolicy.Attempts(System.Int32)">
            <summary>
            Number of times a retry policy is attempted
            </summary>
        </member>
        <member name="T:Rainbow.ObjectFlow.Constraints.Condition`1">
            <summary>
            Container class for constraint functions built by helper class
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Constraints.Condition`1.#ctor(System.Func{`0,System.Boolean},`0)">
            <summary>
             Default constructor
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Constraints.Condition`1.Matches">
            <summary>
            Evaluates the constraint
            </summary>
            <returns>True if the constraint evaluated to true, false otherwise</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Constraints.Condition`1.Matches(System.Boolean)">
            <summary>
            Evaluates the constraint
            </summary>
            <returns>True if the constraint evaluated to true, false otherwise</returns>
        </member>
        <member name="P:Rainbow.ObjectFlow.Language.IWith.Interval">
            <summary>
            Defines time
            </summary>
        </member>
        <member name="T:Rainbow.ObjectFlow.Framework.Workflow`1">
            <summary>
            Pipelines are composed of generic IOperations.  A pipeline
            controls the workflow whereas the IOperation encapsalates logic.
            </summary>
        </member>
        <member name="T:Rainbow.ObjectFlow.Interfaces.IWorkflow`1">
             <summary>
             Interface for the workflow pipeline
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Interfaces.IWorkflow`1.Then">
            <summary>
             Merges concurrent operations.  By default engine waits for all parallel operations to finish before executing subsequent operations sequentially
            </summary>
             <remarks>The default is to wait for all concurrent operatins to finish before continuing with sequential the following sequential operations</remarks>
        </member>
        <member name="M:Rainbow.ObjectFlow.Interfaces.IWorkflow`1.Start">
            <summary>
            Runs the workflow definition
            </summary>
            <returns>Result of the workflow</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Interfaces.IWorkflow`1.Start(`0)">
            <summary>
            Runs the workflow definition
            </summary>
            <param name="data">data to transform</param>
            <returns>Result of the workflow</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Interfaces.IWorkflow`1.Retry">
            <summary>
             Attempt the operation again if it does not finish successfully
            </summary>
             <remarks>Currently ignores any operations that do not inherit from BasicOperation</remarks>
        </member>
        <member name="M:Rainbow.ObjectFlow.Interfaces.IWorkflow`1.Repeat">
            <summary>
            Do the operation again
            </summary>
        </member>
        <member name="P:Rainbow.ObjectFlow.Interfaces.IWorkflow`1.And">
            <summary>
             Chained operations will be executed concurrently
            </summary>
        </member>
        <member name="P:Rainbow.ObjectFlow.Interfaces.IWorkflow`1.Context">
            <summary>
            Gets or sets the context used by operations and functions in the workflow
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.Workflow`1.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.Workflow`1.Do(Rainbow.ObjectFlow.Interfaces.IOperation{`0})">
            <summary>
            Adds an operation into the workflow definition
            </summary>
            <param name="operation">The operation to execute as a generic of IOperation</param>
            <remarks>Operations must inherit from the BasicOperation class</remarks>        
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.Workflow`1.Do(Rainbow.ObjectFlow.Interfaces.IOperation{`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds an operation into the workflow definition given the constraint.  The constraint runs if
            the constraint evaluates to true.
            </summary>
            <param name="operation">The operation to execute as a generic of IOperation</param>
            <param name="constraint">The constraint to evaluate</param>
            <remarks>Operations must inherit from the BasicOperation class</remarks>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.Workflow`1.Do(System.Func{`0,`0})">
            <summary>
            Adds a function into the workflow definition
            </summary>
            <param name="function">Function to add</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.Workflow`1.Do(System.Func{`0,`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds a function into the workflow definition
            </summary>
            <param name="function">Function to add</param>
            <param name="constraint">constraint defines if function will be executed</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.Workflow`1.Start">
            <summary>
            Begins the execution of a workflow
            </summary>
            <returns>The data after being transformed by the Operation objects</returns>
            <remarks>
            The concrete implementation is responsible for definng how the data is passed to the pipeline.
            A common implementation is to use a constructor and an operation that returns the data with no transformations
            </remarks>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.Workflow`1.Start(`0)">
            <summary>
            Runs the workflow definition
            </summary>
            <param name="data">Data to transform</param>
            <returns>Result of the workflow</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.Workflow`1.Then">
            <summary>
            Subsequent Operations and functions will execute after the previous one has completed.
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.Workflow`1.Definition">
            <summary>
            Instantiates a workflow object
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.Workflow`1.Do(Rainbow.ObjectFlow.Interfaces.IWorkflow{`0})">
            <summary>
            Adds a sub-workflow into the workflow definition
            </summary>
            <param name="workflow">Workflow to add</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.Workflow`1.Do(Rainbow.ObjectFlow.Interfaces.IWorkflow{`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds a sub-workflow into the workflow definition
            </summary>
            <param name="workflow">Workflow to add</param>
            <param name="constraint">pre-condition for execution</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.Workflow`1.Retry">
            <summary>
            Allows an operation to be attempted again
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.Workflow`1.Repeat">
            <summary>
            Does the operation again.  Unlike Retry, this does not check on success or failure
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.Workflow`1.Do``1">
            <summary>
            Registers an instance of the type specified in the workflow
            </summary>
            <typeparam name="TOperation">Type that inherits from BasicOperation of T</typeparam>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.Workflow`1.Do``1(Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Registers an instance of the type specified in the workflow
            </summary>
            <typeparam name="TOperation">Type that inherits from BasicOperation of T</typeparam>
            <param name="constraint">The constraint to evaluate</param>
        </member>
        <member name="P:Rainbow.ObjectFlow.Framework.Workflow`1.And">
            <summary>
            Joins one operation onto another to run in parallel
            <remarks>
            Although data will be passed to operations or functions running in parallel 
            these operations will not affect the data passed to subsequent operations.  This was to reduce the 
            complexity of parallel operations in Version 1.x and this behaviour may be extended to 
            pass state in the future.
            </remarks>
            </summary>
        </member>
        <member name="P:Rainbow.ObjectFlow.Framework.Workflow`1.Context">
            <summary>
            Gets or sets the context of the workflow.
            </summary>
            <value>The context for the workflow operations.</value>
        </member>
        <member name="T:Rainbow.ObjectFlow.Constraints.Operators.NotConstraintOperator">
            <summary>
            Negates following constraints.
            </summary>
        </member>
        <member name="T:Rainbow.ObjectFlow.Constraints.Operators.ConstraintOperator">
            <summary>
            Defines constraints allowed with ConstraintOperators.
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Constraints.Operators.ConstraintOperator.Successfull``1(Rainbow.ObjectFlow.Interfaces.IOperation{``0})">
            <summary>
            Creates a SuccessCheckConstraint that can work with BasicOperations of T
            </summary>
            <typeparam name="T">Type the Constraint works with on</typeparam>
            <param name="operaton">the operation the constraint evaluates as successding or failing</param>
            <returns>A SuccessCheckConstraint</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Constraints.Operators.ConstraintOperator.IsTrue(System.Boolean)">
            <summary>
            Creates a BooleanCheckConstraint that works with Booleans.
            </summary>
            <param name="condition">true/False</param>
            <returns>A BooleanCheckConstraint that can evaluate a boolean value</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Constraints.Operators.ConstraintOperator.Matches">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Constraints.Operators.ConstraintOperator.Matches(System.Boolean)">
            <summary>
            
            </summary>
            <param name="matches"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Constraints.Operators.ConstraintOperator.Successfull(System.Func{System.Boolean})">
            <summary>
            Successfulls the specified _function.
            </summary>
            <param name="function">The _function.</param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Constraints.Operators.NotConstraintOperator.Matches(System.Boolean)">
            <summary>
            Evaluates the not expression.
            </summary>
            <param name="matches">The value to evaluate againt</param>
            <returns>True if equivalent, false otherise</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Constraints.Operators.NotConstraintOperator.Matches">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rainbow.ObjectFlow.Helpers.If">
            <summary>
            Helper class for building constraints
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Helpers.If.IsTrue(System.Func{System.Boolean})">
            <summary>
            Returns a BooleanCheckConstraint that can use a function to evaluate
            </summary>
            <param name="evaluator">The function to use</param>
            <returns>BooleanCheckConstraint</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Helpers.If.IsTrue(System.Boolean)">
            <summary>
            Returns a BooleanCheckConstraint that can evaluate a boolean.
            </summary>
            <param name="condition">true/false</param>
            <returns>BooleanCheckConstraint</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Helpers.If.Successfull``1(Rainbow.ObjectFlow.Interfaces.IOperation{``0})">
            <summary>
            SuccessCheckConstraint that can evaluate the success or failure of an operation
            </summary>
            <typeparam name="T">Type the operation uses</typeparam>
            <param name="operation">the Operation to evaluate</param>
            <returns>SuccessCheckConstraint</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Helpers.If.IsFalse(System.Boolean)">
            <summary>
            determines if the condition evaluates as false
            </summary>
            <param name="condition">condition to evalueate</param>
            <returns>True if the condition evaluates to false, false otherwise</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Helpers.If.Successfull(System.String)">
            <summary>
            SuccessCheckConstraint that can evaluate the success or failure of a function
            </summary>
            <param name="key">the Operation to evaluate</param>
            <returns>SuccessCheckConstraint</returns>
        </member>
        <member name="P:Rainbow.ObjectFlow.Helpers.If.Not">
            <summary>
            Creates a Not operator that negates following constraints
            </summary>
        </member>
        <member name="T:Rainbow.ObjectFlow.Interfaces.IStatefulWorkflow`1">
            <summary>
            A workflow that is able to pause at states and be resumed later.
            </summary>
            <typeparam name="T">The object that will be stepped through the workflow</typeparam>
        </member>
        <member name="M:Rainbow.ObjectFlow.Interfaces.IStatefulWorkflow`1.Yield(System.Object)">
            <summary>
            Signal that the workflow should pause here and then resume later
            at this same point. This can be used to persist the state of the 
            object and resumed later when <c>Continue</c> is called.
            </summary>
            <param name="breakPointId">The identifier that describes where the workflow
            yielded so that it can return to this point later.</param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Interfaces.IStatefulWorkflow`1.Continue(`0)">
            <summary>
            Continues execution of the workflow where <c>obj</c> last left off 
            after <c>Yield</c> was called.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Interfaces.IStatefulWorkflow`1.IsMidlife(`0)">
            <summary>
            Indicates that <c>obj</c> has not yet passed through all workflow steps.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Interfaces.IStatefulWorkflow`1.Do``1">
            <summary>
            Registers an instance of the specified type in the workflow
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Interfaces.IStatefulWorkflow`1.Do``1(Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Registers an instance of the specified type in the workflow
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Interfaces.IStatefulWorkflow`1.Do(Rainbow.ObjectFlow.Interfaces.IOperation{`0})">
            <summary>
            Adds operations into the workflow definition
            </summary>
            <param name="operation">The operation to add</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Interfaces.IStatefulWorkflow`1.Do(System.Func{`0,`0})">
            <summary>
            Adds a function into the execution path
            </summary>
            <param name="function">The function to add</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Interfaces.IStatefulWorkflow`1.Do(System.Func{`0,`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds a function into the execution path
            </summary>
            <param name="function">The funciton to add</param>
            <param name="constraint">constraint that determines if the operation is executed</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Interfaces.IStatefulWorkflow`1.Do(Rainbow.ObjectFlow.Interfaces.IOperation{`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds an operation into the execution path 
            </summary>
            <param name="operation">operatio to add</param>
            <param name="constraint">constraint that determines if the operation is executed</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Interfaces.IStatefulWorkflow`1.Do(Rainbow.ObjectFlow.Interfaces.IWorkflow{`0})">
            <summary>
            Adds a sub-workflow into the execution path
            </summary>
            <param name="workflow">The function to add</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Interfaces.IStatefulWorkflow`1.Do(Rainbow.ObjectFlow.Interfaces.IWorkflow{`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds a sub-workflow into the execution path
            </summary>
            <param name="workflow">The funciton to add</param>
            <param name="constraint">constraint that determines if the workflow is executed</param>
        </member>
        <member name="P:Rainbow.ObjectFlow.Interfaces.IStatefulWorkflow`1.WorkflowId">
            <summary>
            Gets an identifier that describes the workflow. This can be a string,
            number, Guid, or any other object that provides a meaningful implementation
            of the <c>.Equals(object)</c> method.
            </summary>
        </member>
        <member name="T:Rainbow.ObjectFlow.Framework.StatefulWorkflow`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Rainbow.ObjectFlow.Framework.StatefulWorkflow`1.subflows">
            <summary>Index for </summary>
        </member>
        <member name="F:Rainbow.ObjectFlow.Framework.StatefulWorkflow`1.keys">
            <summary>An ordered list of keys</summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.StatefulWorkflow`1.#ctor(System.Object)">
            <summary>
            Creates a workflow that has persistable states and is identified by
            <c>workflowId</c>.
            </summary>
            <param name="workflowId">Persistable value that represents this workflow.
            </param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.StatefulWorkflow`1.#ctor">
            <summary>
            Creates a new workflow that has persistable states. Usage of this 
            constructure asserts that an object that might pass through this workflow
            will pass through only this workflow and no other stateful workflow.
            Because of this restriction, it is recommended that you use 
            <see cref="M:Rainbow.ObjectFlow.Framework.StatefulWorkflow`1.#ctor(System.Object)"/> instead.
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.StatefulWorkflow`1.Yield(System.Object)">
            <summary>
            Continue the workflow where the given object left off.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.StatefulWorkflow`1.Continue(`0)">
            <summary>
            Continues execution of the workflow where <c>obj</c> last left off 
            after <c>Yield</c> was called.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.StatefulWorkflow`1.IsMidlife(`0)">
            <summary>
            Indicates that <c>obj</c> is currently passing through this workflow
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.StatefulWorkflow`1.Start(`0)">
            <summary>
            Start the workflow
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.StatefulWorkflow`1.Do``1">
            <summary>
            Registers an instance of the specified type in the workflow
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.StatefulWorkflow`1.Rainbow#ObjectFlow#Interfaces#IStatefulWorkflow{T}#Do``1(Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Registers an instance of the specified type in the workflow
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.StatefulWorkflow`1.Do(Rainbow.ObjectFlow.Interfaces.IOperation{`0})">
            <summary>
            Adds operations into the workflow definition
            </summary>
            <param name="operation">The operation to add</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.StatefulWorkflow`1.Rainbow#ObjectFlow#Interfaces#IStatefulWorkflow{T}#Do(System.Func{`0,`0})">
            <summary>
            Adds a function into the execution path
            </summary>
            <param name="function">The function to add</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.StatefulWorkflow`1.Rainbow#ObjectFlow#Interfaces#IStatefulWorkflow{T}#Do(System.Func{`0,`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds a function into the execution path
            </summary>
            <param name="function">The funciton to add</param>
            <param name="constraint">constraint that determines if the operation is executed</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.StatefulWorkflow`1.Rainbow#ObjectFlow#Interfaces#IStatefulWorkflow{T}#Do(Rainbow.ObjectFlow.Interfaces.IOperation{`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds an operation into the execution path 
            </summary>
            <param name="operation">operatio to add</param>
            <param name="constraint">constraint that determines if the operation is executed</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.StatefulWorkflow`1.Rainbow#ObjectFlow#Interfaces#IStatefulWorkflow{T}#Do(Rainbow.ObjectFlow.Interfaces.IWorkflow{`0})">
            <summary>
            Adds a sub-workflow into the execution path
            </summary>
            <param name="workflow">The function to add</param>
        </member>
        <member name="M:Rainbow.ObjectFlow.Framework.StatefulWorkflow`1.Rainbow#ObjectFlow#Interfaces#IStatefulWorkflow{T}#Do(Rainbow.ObjectFlow.Interfaces.IWorkflow{`0},Rainbow.ObjectFlow.Interfaces.ICheckConstraint)">
            <summary>
            Adds a sub-workflow into the execution path
            </summary>
            <param name="workflow">The funciton to add</param>
            <param name="constraint">constraint that determines if the workflow is executed</param>
        </member>
        <member name="P:Rainbow.ObjectFlow.Framework.StatefulWorkflow`1.WorkflowId">
            <summary>
            Gets an identifier that describes the workflow. This can be a string,
            number, Guid, or any other object that provides a meaningful implementation
            of the <c>.Equals(object)</c> method.
            </summary>
        </member>
        <member name="T:Rainbow.ObjectFlow.Interfaces.IStatefulObject">
            <summary>
            <para>
            A persistable object that represents where a workflow was left off. By passing
            one of these objects to a IStatefullWorkflow we can resume the workflow where
            it was last left off. 
            </para>
            <para>
            The state ID is left as an object but should contain a meaningful implementation 
            of <c>.Equals(object)</c>. Therefore, string, int, and Guid are all great choices
            for state and workflow identifiers. If you choose to make a custom object for this
            purpose, be sure to provide a meaningful <c>Equals(object)</c> operation.
            </para>
            </summary>
        </member>
        <member name="M:Rainbow.ObjectFlow.Interfaces.IStatefulObject.GetStateId(System.Object)">
            <summary>
            Gets the identifer that represents the object's state. A workflow uses this
            identifier to restore the state of the object in the 
            </summary>
            <param name="workflowId">The identifier for the workflow. If this value is
            null, this object is expected to either be valid for only a single workflow
            or should throw a NotSupportedException</param>
            <returns>The state within a workflow that this object is currently in. If the 
            object isn't in a worflow identified by <c>workflowId</c>, this method will 
            return null</returns>
        </member>
        <member name="M:Rainbow.ObjectFlow.Interfaces.IStatefulObject.SetStateId(System.Object,System.Object)">
            <summary>
            Gets the identifer that represents the object's state. A workflow uses this
            identifier to restore the state of the object in the 
            </summary>
            <param name="workflowId">The identifier for the workflow. If this value is
            null, this object is expected to either be valid for only a single workflow
            or should throw a NotSupportedException</param>
            <param name="stateId">The state identifier for the workflow. </param>
        </member>
    </members>
</doc>
